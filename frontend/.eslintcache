[{"/usr/src/app/frontend/src/index.tsx":"1","/usr/src/app/frontend/src/App.tsx":"2","/usr/src/app/frontend/src/theme/mainTheme.ts":"3","/usr/src/app/frontend/src/stores/books.ts":"4","/usr/src/app/frontend/src/containers/BooksContainer/BooksContainer.tsx":"5","/usr/src/app/frontend/src/containers/SingleBookContainer/SingleBookContainer.tsx":"6","/usr/src/app/frontend/src/stores/singleBook.ts":"7","/usr/src/app/frontend/src/containers/RoutesContainer/RoutesContainer.tsx":"8","/usr/src/app/frontend/src/containers/NavigationContainer/NavigationContainer.tsx":"9","/usr/src/app/frontend/src/components/Image/Image.tsx":"10","/usr/src/app/frontend/src/components/PdfView/PdfView.tsx":"11","/usr/src/app/frontend/src/containers/ReaderContainer/ReaderContainer.tsx":"12"},{"size":459,"mtime":1612689541745,"results":"13","hashOfConfig":"14"},{"size":1908,"mtime":1613632058013,"results":"15","hashOfConfig":"14"},{"size":456,"mtime":1612689471949,"results":"16","hashOfConfig":"14"},{"size":544,"mtime":1613200888808,"results":"17","hashOfConfig":"14"},{"size":4137,"mtime":1613203559864,"results":"18","hashOfConfig":"14"},{"size":4873,"mtime":1613806064783,"results":"19","hashOfConfig":"14"},{"size":1567,"mtime":1613802747975,"results":"20","hashOfConfig":"14"},{"size":935,"mtime":1613805436071,"results":"21","hashOfConfig":"14"},{"size":1485,"mtime":1613202560372,"results":"22","hashOfConfig":"14"},{"size":943,"mtime":1613631480141,"results":"23","hashOfConfig":"14"},{"size":2410,"mtime":1613806742283,"results":"24","hashOfConfig":"14"},{"size":1383,"mtime":1613806436835,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"gusk1t",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/usr/src/app/frontend/src/index.tsx",[],["54","55"],"/usr/src/app/frontend/src/App.tsx",[],"/usr/src/app/frontend/src/theme/mainTheme.ts",[],"/usr/src/app/frontend/src/stores/books.ts",[],"/usr/src/app/frontend/src/containers/BooksContainer/BooksContainer.tsx",["56"],"import React, { useState, useEffect } from 'react';\nimport { useStore } from \"effector-react\";\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport { useHistory, useRouteMatch, useLocation, useParams } from \"react-router-dom\";\n// components\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\n\n// store\nimport { $books, getBooksFx } from '../../stores/books';\n\n// types\nimport { BookType } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        table: {\n            maxWidth: 800,\n            flex: '1 1',\n        },\n        titleCell: {\n            fontWeight: 600\n        },\n        tableRow: {\n            cursor: 'pointer',\n        },\n        paginateContainer: {\n            maxWidth: 800,\n        },\n        tableContainer: {\n            maxWidth: 800,\n            minHeight: 600,\n            display: 'flex',\n            flexDirection: 'column'\n        }\n    }),\n);\n\nfunction BooksContainer() {\n    const history = useHistory();\n    const routeMatch = useRouteMatch();\n    const location = useLocation();\n    const params = useParams();\n\n    const classes = useStyles();\n    const [page, setPage] = useState<number>(0);\n    const [rowsPerPage, setRowsPerPage] = useState<number>(10);\n\n    const booksStore = useStore($books);\n\n    useEffect(() => {\n        (async () => {\n            await getBooksFx({ skip: page * rowsPerPage, limit: rowsPerPage });\n        })();\n    }, []);\n\n    useEffect(() => {\n        getBooksFx({\n            skip: page * rowsPerPage,\n            limit: rowsPerPage\n        });\n    }, [page, rowsPerPage]);\n\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    console.log(history)\n    console.log(routeMatch)\n    console.log(location)\n    console.log(params)\n\n    const handleChoosePage = (bookId: number) => {\n        history.push(`/books/${bookId}`);\n    };\n\n    return (\n        <>\n            <Toolbar />\n            <TableContainer className={classes.tableContainer} component={Paper}>\n                <Table className={classes.table} size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Title</TableCell>\n                            <TableCell align=\"left\">Description</TableCell>\n                            <TableCell align=\"left\">Pages</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {booksStore.books.map((book: BookType) => (\n                            <TableRow className={classes.tableRow} hover key={book.book_id} onClick={() => handleChoosePage(book.book_id)}>\n                                <TableCell className={classes.titleCell} component=\"th\" scope=\"row\">\n                                    {book.title}\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {book.subtitle}\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {book.pages}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n                <TablePagination\n                    className={classes.paginateContainer}\n                    component=\"div\"\n                    count={booksStore.count}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    rowsPerPage={rowsPerPage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </TableContainer>\n        </>\n    );\n}\n\nexport { BooksContainer }","/usr/src/app/frontend/src/containers/SingleBookContainer/SingleBookContainer.tsx",["57"],"import React, { ChangeEvent, useEffect } from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\nimport { useStore } from 'effector-react';\n\n// material ui\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\n// components\nimport { PdfView } from '../../components/PdfView/PdfView';\n\n// stores\nimport { $singleBook, getCertainBook, uploadBook } from '../../stores/singleBook';\n\n// types\nimport { BookType } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        input: {\n            display: 'none',\n        },\n        button: {\n            margin: theme.spacing(1),\n        },\n        subtitle: {\n            fontWeight: 600,\n        }\n    }),\n);\n\nconst SingleBookContainer = () => {\n    const classes = useStyles();\n    const history = useHistory();\n    const singleBook = useStore<BookType>($singleBook);\n    let { id } = useParams<any>();\n\n    useEffect(() => {\n        (async () => {\n            await getCertainBook(id);\n        })()\n    }, []);\n\n    const handleUploadBook = async (e: ChangeEvent<HTMLInputElement>) => {\n        const formData = new FormData();\n\n        const file = e?.target?.files?.length && e?.target?.files[0];\n        if (file) {\n            formData.append('book', file, file?.name);\n            await uploadBook({ id, data: formData });\n        }\n    }\n\n    const handleReadBook = () => {\n        history.push(`/books/${id}/reader`);\n    }\n\n    return (\n        <>\n            <Toolbar />\n            <Box display=\"flex\">\n                <Box display=\"flex\" flexDirection={'column'}>\n                    <Typography variant=\"h3\" noWrap>\n                        {singleBook.title}\n                    </Typography>\n                    {singleBook.book_id && singleBook.book_link &&\n                        <PdfView sourceDocument={`http://localhost:4000/upload/getBookPage/${singleBook.book_id}/0`} />\n                    }\n                </Box>\n                <div className={classes.root}>\n                    {singleBook.book_link ? (\n                        <Button onClick={handleReadBook} variant=\"contained\" color='primary'>\n                            Read Book\n                        </Button>\n                    ) : (\n                        <>\n                            <input\n                                accept=\"application/pdf\"\n                                className={classes.input}\n                                id=\"pdf-button-file\"\n                                type=\"file\"\n                                onChange={handleUploadBook}\n                            />\n                            <label htmlFor=\"pdf-button-file\">\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    component=\"span\"\n                                    className={classes.button}\n                                    startIcon={<CloudUploadIcon />}\n                                >\n                                    Upload Book\n                                </Button>\n                            </label>\n                        </>\n                    )}\n                </div>\n            </Box>\n            <Box>\n                <Typography display='inline' className={classes.subtitle} variant=\"subtitle1\" noWrap>\n                    Subtitle:\n                </Typography>\n                &nbsp;\n                <Typography display='inline' noWrap>\n                    {singleBook.subtitle}\n                </Typography>\n            </Box>\n            <Box>\n                <Typography display='inline' className={classes.subtitle} variant=\"subtitle1\" noWrap>\n                    Authors:\n                </Typography>\n                &nbsp;\n                <Typography display='inline' noWrap>\n                    {singleBook?.authors?.map(author => `${author.first_name} ${author.middle_name || ''} ${author.last_name}`).join(', ') || 'No Authors'}\n                </Typography>\n            </Box>\n            <Box>\n                <Typography display='inline' className={classes.subtitle} variant=\"subtitle1\" noWrap>\n                    Tags:\n                </Typography>\n                &nbsp;\n                <Typography display='inline' noWrap>\n                    {singleBook?.tags?.map(tag => tag.tag_name).join(', ') || 'No Tags'}\n                </Typography>\n            </Box>\n        </>\n    );\n};\n\nexport { SingleBookContainer };","/usr/src/app/frontend/src/stores/singleBook.ts",[],"/usr/src/app/frontend/src/containers/RoutesContainer/RoutesContainer.tsx",[],"/usr/src/app/frontend/src/containers/NavigationContainer/NavigationContainer.tsx",[],"/usr/src/app/frontend/src/components/Image/Image.tsx",[],["58","59"],"/usr/src/app/frontend/src/components/PdfView/PdfView.tsx",["60"],"/usr/src/app/frontend/src/containers/ReaderContainer/ReaderContainer.tsx",["61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":62,"column":8,"nodeType":"68","endLine":62,"endColumn":10,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":51,"column":8,"nodeType":"68","endLine":51,"endColumn":10,"suggestions":"71"},{"ruleId":"62","replacedBy":"72"},{"ruleId":"64","replacedBy":"73"},{"ruleId":"66","severity":1,"message":"74","line":34,"column":8,"nodeType":"68","endLine":34,"endColumn":10,"suggestions":"75"},{"ruleId":"66","severity":1,"message":"70","line":29,"column":8,"nodeType":"68","endLine":29,"endColumn":10,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'page' and 'rowsPerPage'. Either include them or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["80"],["77"],["78"],"React Hook useEffect has missing dependencies: 'page' and 'sourceDocument'. Either include them or remove the dependency array.",["81"],["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"85","fix":"89"},"Update the dependencies array to be: [page, rowsPerPage]",{"range":"90","text":"91"},"Update the dependencies array to be: [id]",{"range":"92","text":"93"},"Update the dependencies array to be: [page, sourceDocument]",{"range":"94","text":"95"},{"range":"96","text":"93"},[1875,1877],"[page, rowsPerPage]",[1386,1388],"[id]",[1136,1138],"[page, sourceDocument]",[784,786]]